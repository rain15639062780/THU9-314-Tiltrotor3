/**
 * @file pwm_capture_config.h
 *
 * 
 */
#pragma once

#include <sys/types.h>
#include <stdbool.h>

#include <time.h>
#include <queue.h>


/***************************************************
*FMU_CAP1-------TIM2_CH1_IN-------PA5
*FMU_CAP2-------TIM2_CH2_IN-------PB3
*FMU_CAP3-------TIM2_CH4_IN-------PB11

PWM Capture
 *
 * 3  PWM Capture inputs are configured.
 *
 * Pins:
 *
 * FMU_CAP1 : PA5  : TIM2_CH1
 * FMU_CAP2 : PB3  : TIM2_CH2
 * FMU_CAP3 : PB11 : TIM2_CH4

#define GPIO_TIM2_CH1_IN     PA5   T2C1  FMU_CAP1  GPIO_TIM2_CH1IN_3
#define GPIO_TIM2_CH2_IN     PB3   T2C2  FMU_CAP2  GPIO_TIM2_CH2IN_2
#define GPIO_TIM2_CH4_IN     PB11  T2C4  FMU_CAP3  GPIO_TIM2_CH4IN_2

***************************************************/

/* Reset pin define */

//2018-12-21 rain 修改引脚配置

//2018-12-22 添加自定义宏，用于适配cap口
#define RAIN_GPIO_INPUT_CAP		GPIO_INPUT_CAP1
#define RAIN_INPUT_CAP_TIMER		INPUT_CAP1_TIMER
#define RAIN_INPUT_CAP_CHANNEL		INPUT_CAP1_CHANNEL


#define GPIO_VDD_RANGEFINDER_EN RAIN_GPIO_INPUT_CAP

#if HRT_TIMER == RAIN_INPUT_CAP_TIMER
#error cannot share timer between HRT and PWMCAP
#endif

#if !defined(RAIN_GPIO_INPUT_CAP) || !defined(RAIN_INPUT_CAP_TIMER) || !defined(RAIN_INPUT_CAP_CHANNEL)
#error PWMCAP defines are needed in board_config.h for this board
#endif

/* PWMCAP configuration */
#if   RAIN_INPUT_CAP_TIMER == 1
# define PWMCAP_TIMER_BASE	STM32_TIM1_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB2ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB2ENR_TIM1EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM1CC
# define PWMCAP_TIMER_CLOCK	STM32_APB2_TIM1_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 2
# define PWMCAP_TIMER_BASE	STM32_TIM2_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB1ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB1ENR_TIM2EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM2
# define PWMCAP_TIMER_CLOCK	STM32_APB1_TIM2_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 3
# define PWMCAP_TIMER_BASE	STM32_TIM3_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB1ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB1ENR_TIM3EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM3
# define PWMCAP_TIMER_CLOCK	STM32_APB1_TIM3_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 4
# define PWMCAP_TIMER_BASE	STM32_TIM4_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB1ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB1ENR_TIM4EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM4
# define PWMCAP_TIMER_CLOCK	STM32_APB1_TIM4_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 5
# define PWMCAP_TIMER_BASE	STM32_TIM5_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB1ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB1ENR_TIM5EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM5
# define PWMCAP_TIMER_CLOCK	STM32_APB1_TIM5_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 8
# define PWMCAP_TIMER_BASE	STM32_TIM8_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB2ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB2ENR_TIM8EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM8CC
# define PWMCAP_TIMER_CLOCK	STM32_APB2_TIM8_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 9
# define PWMCAP_TIMER_BASE	STM32_TIM9_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB2ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB2ENR_TIM9EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM1BRK
# define PWMCAP_TIMER_CLOCK	STM32_APB2_TIM9_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 10
# define PWMCAP_TIMER_BASE	STM32_TIM10_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB2ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB2ENR_TIM10EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM1UP
# define PWMCAP_TIMER_CLOCK	STM32_APB2_TIM10_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 11
# define PWMCAP_TIMER_BASE	STM32_TIM11_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB2ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB2ENR_TIM11EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM1TRGCOM
# define PWMCAP_TIMER_CLOCK	STM32_APB2_TIM11_CLKIN
#elif RAIN_INPUT_CAP_TIMER == 12
# define PWMCAP_TIMER_BASE	STM32_TIM12_BASE
# define PWMCAP_TIMER_POWER_REG	STM32_RCC_APB1ENR
# define PWMCAP_TIMER_POWER_BIT	RCC_APB1ENR_TIM12EN
# define PWMCAP_TIMER_VECTOR	STM32_IRQ_TIM8BRK
# define PWMCAP_TIMER_CLOCK	STM32_APB1_TIM12_CLKIN
#else
# error RAIN_INPUT_CAP_TIMER must be a value between 1 and 12
#endif

/*
 * HRT clock must be at least 1MHz
 */
#if PWMCAP_TIMER_CLOCK <= 1000000
# error PWMCAP_TIMER_CLOCK must be greater than 1MHz
#endif

/*
 * Timer register accessors
 */
#define REG(_reg)	(*(volatile uint32_t *)(PWMCAP_TIMER_BASE + _reg))

#define rCR1		REG(STM32_GTIM_CR1_OFFSET)
#define rCR2		REG(STM32_GTIM_CR2_OFFSET)
#define rSMCR		REG(STM32_GTIM_SMCR_OFFSET)
#define rDIER		REG(STM32_GTIM_DIER_OFFSET)
#define rSR		REG(STM32_GTIM_SR_OFFSET)
#define rEGR		REG(STM32_GTIM_EGR_OFFSET)
#define rCCMR1		REG(STM32_GTIM_CCMR1_OFFSET)
#define rCCMR2		REG(STM32_GTIM_CCMR2_OFFSET)
#define rCCER		REG(STM32_GTIM_CCER_OFFSET)
#define rCNT		REG(STM32_GTIM_CNT_OFFSET)
#define rPSC		REG(STM32_GTIM_PSC_OFFSET)
#define rARR		REG(STM32_GTIM_ARR_OFFSET)
#define rCCR1		REG(STM32_GTIM_CCR1_OFFSET)
#define rCCR2		REG(STM32_GTIM_CCR2_OFFSET)
#define rCCR3		REG(STM32_GTIM_CCR3_OFFSET)
#define rCCR4		REG(STM32_GTIM_CCR4_OFFSET)
#define rDCR		REG(STM32_GTIM_DCR_OFFSET)
#define rDMAR		REG(STM32_GTIM_DMAR_OFFSET)

/*
 * Specific registers and bits used by HRT sub-functions
 */
#if RAIN_INPUT_CAP_CHANNEL == 1
#define rCCR_PWMCAP_A		rCCR1			/* compare register for PWMCAP */
#define DIER_PWMCAP_A		(GTIM_DIER_CC1IE) 	/* interrupt enable for PWMCAP */
#define SR_INT_PWMCAP_A		GTIM_SR_CC1IF		/* interrupt status for PWMCAP */
#define rCCR_PWMCAP_B		rCCR2 			/* compare register for PWMCAP */
#define SR_INT_PWMCAP_B		GTIM_SR_CC2IF		/* interrupt status for PWMCAP */
#define CCMR1_PWMCAP		((0x02 << GTIM_CCMR1_CC2S_SHIFT) | (0x01 << GTIM_CCMR1_CC1S_SHIFT))
#define CCMR2_PWMCAP		0
#define CCER_PWMCAP		(GTIM_CCER_CC2P | GTIM_CCER_CC1E | GTIM_CCER_CC2E)
#define SR_OVF_PWMCAP		(GTIM_SR_CC1OF | GTIM_SR_CC2OF)
#define SMCR_PWMCAP_1		(0x05 << GTIM_SMCR_TS_SHIFT)
#define SMCR_PWMCAP_2		((0x04 << GTIM_SMCR_SMS_SHIFT) | SMCR_PWMCAP_1)
#elif RAIN_INPUT_CAP_CHANNEL == 2
#define rCCR_PWMCAP_A		rCCR2			/* compare register for PWMCAP */
#define DIER_PWMCAP_A		(GTIM_DIER_CC2IE)	/* interrupt enable for PWMCAP */
#define SR_INT_PWMCAP_A		GTIM_SR_CC2IF		/* interrupt status for PWMCAP */
#define rCCR_PWMCAP_B		rCCR1			/* compare register for PWMCAP */
#define DIER_PWMCAP_B		GTIM_DIER_CC1IE		/* interrupt enable for PWMCAP */
#define SR_INT_PWMCAP_B		GTIM_SR_CC1IF		/* interrupt status for PWMCAP */
#define CCMR1_PWMCAP		((0x01 << GTIM_CCMR1_CC2S_SHIFT) | (0x02 << GTIM_CCMR1_CC1S_SHIFT))
#define CCMR2_PWMCAP		0
#define CCER_PWMCAP		(GTIM_CCER_CC1P | GTIM_CCER_CC1E | GTIM_CCER_CC2E)
#define SR_OVF_PWMCAP		(GTIM_SR_CC1OF | GTIM_SR_CC2OF)
#define SMCR_PWMCAP_1		(0x06 << GTIM_SMCR_TS_SHIFT)
#define SMCR_PWMCAP_2		((0x04 << GTIM_SMCR_SMS_SHIFT) | SMCR_PWMCAP_1)
#else
#error RAIN_INPUT_CAP_CHANNEL must be either 1 and 2.
#endif

// XXX refactor this out of this driver
//#define TIMEOUT_POLL 300000 /* reset after no response over this time in microseconds [0.3s] */
//#define TIMEOUT_READ 200000 /* don't reset if the last read is back more than this time in microseconds [0.2s] */
